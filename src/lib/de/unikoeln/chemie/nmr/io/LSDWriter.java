package de.unikoeln.chemie.nmr.io;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jcamp.spectrum.Assignment;
import org.jcamp.spectrum.IAssignmentTarget;
import org.jcamp.spectrum.NMRSpectrum;
import org.jcamp.spectrum.Spectrum;
import org.jcamp.spectrum.Spectrum1D;
import org.jcamp.spectrum.Spectrum2D;
import org.jcamp.spectrum.assignments.AtomReference;
import org.jcamp.spectrum.notes.Note;
import org.jcamp.spectrum.notes.NoteDescriptor;
import org.openscience.cdk.interfaces.IAtom;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.interfaces.IAtomType;

import de.unikoeln.chemie.nmr.data.NMR2DSpectrum;
import de.unikoeln.chemie.nmr.data.NmreData;

public class LSDWriter {
	OutputStream os;
	PrintWriter pw;
	String separator=", ";
	BufferedWriter sdfwriter;

	public LSDWriter(OutputStream os){
		this.os=os;
	}
	
	public LSDWriter(PrintWriter pw){
		this.pw=pw;
	}
	
	public void write(NmreData data) throws IOException{
		if(os!=null)
			sdfwriter=new BufferedWriter(new OutputStreamWriter(os));
		else
			sdfwriter=new BufferedWriter(pw);
		sdfwriter.write("; file generated by NMReDATA javatools\r\n");
		sdfwriter.write("; "+new Date()+"\r\n");
		for(IAtom atom : data.getMolecule().atoms()) {
			sdfwriter.write("MULT "+(data.getMolecule().getAtomNumber(atom)+1)+" "+atom.getSymbol()+" "+(atom.getHybridization()==IAtomType.Hybridization.SP2 ? 2 :atom.getHybridization()==IAtomType.Hybridization.SP3 ? 3 : 1) +" "+(getHcount(data.getMolecule(), atom)+atom.getImplicitHydrogenCount())+" "+atom.getFormalCharge()+"\r\n");
		}
		sdfwriter.write("\r\n");
		Map<Double,Integer> peaklabelmap = new HashMap<Double, Integer>();
		for(Spectrum spectrum : data.getSpectra()) {
			if(spectrum instanceof Spectrum1D) {
				for(Assignment assignment : ((Spectrum1D) spectrum).getAssignments()) {
					for(IAssignmentTarget atom : assignment.getTargets()) {
						peaklabelmap.put(assignment.getPattern().getPosition()[0], ((AtomReference)atom).getAtomNumber());
						if(((NMRSpectrum)spectrum).getNucleus().equals("1H"))
							sdfwriter.write("SHIH "+((AtomReference)atom).getAtomNumber()+" "+assignment.getPattern().getPosition()[0]+"\r\n");
						else
							sdfwriter.write("SHIX "+((AtomReference)atom).getAtomNumber()+" "+assignment.getPattern().getPosition()[0]+"\r\n");
					}
				}
				sdfwriter.write("\r\n");
			}
		}
		for(Spectrum spectrum : data.getSpectra()) {
			if(spectrum instanceof Spectrum2D) {
				for(int i=0;i<((NMR2DSpectrum)spectrum).getPeakTable().length;i++){
		            NoteDescriptor noteDescriptor=new NoteDescriptor("CorType");
					sdfwriter.write(((Note)spectrum.getNotes(noteDescriptor).get(0)).getValue()+" "+peaklabelmap.get(((NMR2DSpectrum)spectrum).getPeakTable()[i].getPosition()[0])+" "+peaklabelmap.get(((NMR2DSpectrum)spectrum).getPeakTable()[i].getPosition()[1])+"\r\n");
				}
				sdfwriter.write("\r\n");
			}
		}
	}
	
	public static int getHcount(IAtomContainer mol, IAtom atom) {
		List<IAtom> atoms = mol.getConnectedAtomsList(atom);
		int NumberOfHs=0;
        for (int k = 0; k < atoms.size(); k++) {
          if (atoms.get(k).getSymbol().equals("H")) {
            NumberOfHs++;
          }
        }		
		return NumberOfHs;
	}
	
	public void close() throws IOException{
		sdfwriter.close();
	}
}